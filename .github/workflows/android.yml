name: Android Build (Release) — ZIP

on:
  workflow_dispatch: {}      # 수동 실행
  push:
    tags: ['v*']             # v0.1.0 같은 태그 푸시 시 자동 릴리스

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write        # 릴리스 업로드에 필요

    env:
      ZIP_NAME: DPC_Kiosk_MVP_Whitelist_UI.zip   # ← 네 ZIP 이름으로 바꾸기
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) ZIP 풀기 (리포 루트에 ZIP이 있다고 가정)
      - name: Unzip project
        run: |
          unzip -o "$ZIP_NAME" -d .
          # 만약 압축 풀었더니 최상위에 폴더가 한 겹 있으면, 다음 줄처럼 cd 추가:
          # cd DPC_Kiosk_MVP_UI
          ls -la

      # 2) JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # 3) Android SDK 설치 (compileSdk 35 기준 — 필요 패키지 설치)
      - name: Set up Android SDK
        run: |
          mkdir -p "$ANDROID_SDK_ROOT"
          curl -sLo cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
             "platform-tools" "platforms;android-35" "build-tools;35.0.0"
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties

      # 4) Gradle(시스템 설치) — 저장소에 gradlew가 없어도 빌드되도록
      - name: Install Gradle 8.7
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7
          gradle -v

      # 5) 빌드
      - name: Build Release APK
        run: gradle assembleRelease

      # 6) 산출물 찾기
      - name: Locate APK
        id: apk
        shell: bash
        run: |
          FILE=$(ls app/build/outputs/apk/release/*-release*.apk 2>/dev/null | head -n1 || true)
          if [ -z "$FILE" ]; then FILE=$(ls app/build/outputs/apk/release/*.apk | head -n1); fi
          if [ -z "$FILE" ]; then echo "No APK found" && exit 1; fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "APK: $FILE"

      # 7) SHA256(Base64) — QR 페이로드에 넣을 체크섬 생성
      - name: Compute SHA256 (Base64)
        id: sha
        shell: bash
        run: |
          SHA=$(sha256sum "${{ steps.apk.outputs.file }}" | awk '{print $1}')
          B64=$(echo -n "$SHA" | xxd -r -p | base64 -w0)
          printf "%s" "$B64" > apk.sha256.b64
          echo "sha256_b64=$B64" >> "$GITHUB_OUTPUT"
          echo "SHA256(Base64): $B64"

      # 8) 아티팩트 업로드 (수동 다운로드용)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: |
            ${{ steps.apk.outputs.file }}
            apk.sha256.b64

      # 9) 태그로 푸시한 경우 자동 릴리스 생성(+APK 첨부)
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.apk.outputs.file }}
            apk.sha256.b64
